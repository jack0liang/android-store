package com.gialen.baselib.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gialen.baselib.bean.db_bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Void> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ActionType = new Property(0, int.class, "actionType", false, "ACTION_TYPE");
        public final static Property Birthday = new Property(1, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Id = new Property(3, Long.class, "id", false, "ID");
        public final static Property LoginId = new Property(4, String.class, "loginId", false, "LOGIN_ID");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Platform = new Property(7, int.class, "platform", false, "PLATFORM");
        public final static Property RecommendCode = new Property(8, String.class, "recommendCode", false, "RECOMMEND_CODE");
        public final static Property Sex = new Property(9, int.class, "sex", false, "SEX");
        public final static Property StoreId = new Property(10, Long.class, "storeId", false, "STORE_ID");
        public final static Property Token = new Property(11, String.class, "token", false, "TOKEN");
        public final static Property UserHeadPic = new Property(12, String.class, "userHeadPic", false, "USER_HEAD_PIC");
        public final static Property UserLevel = new Property(13, int.class, "userLevel", false, "USER_LEVEL");
        public final static Property Username = new Property(14, String.class, "username", false, "USERNAME");
        public final static Property HasPassword = new Property(15, int.class, "hasPassword", false, "HAS_PASSWORD");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"ACTION_TYPE\" INTEGER NOT NULL ," + // 0: actionType
                "\"BIRTHDAY\" TEXT," + // 1: birthday
                "\"EMAIL\" TEXT," + // 2: email
                "\"ID\" INTEGER," + // 3: id
                "\"LOGIN_ID\" TEXT," + // 4: loginId
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"PHONE\" TEXT," + // 6: phone
                "\"PLATFORM\" INTEGER NOT NULL ," + // 7: platform
                "\"RECOMMEND_CODE\" TEXT," + // 8: recommendCode
                "\"SEX\" INTEGER NOT NULL ," + // 9: sex
                "\"STORE_ID\" INTEGER," + // 10: storeId
                "\"TOKEN\" TEXT," + // 11: token
                "\"USER_HEAD_PIC\" TEXT," + // 12: userHeadPic
                "\"USER_LEVEL\" INTEGER NOT NULL ," + // 13: userLevel
                "\"USERNAME\" TEXT," + // 14: username
                "\"HAS_PASSWORD\" INTEGER NOT NULL );"); // 15: hasPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getActionType());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(2, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(5, loginId);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
        stmt.bindLong(8, entity.getPlatform());
 
        String recommendCode = entity.getRecommendCode();
        if (recommendCode != null) {
            stmt.bindString(9, recommendCode);
        }
        stmt.bindLong(10, entity.getSex());
 
        Long storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindLong(11, storeId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
 
        String userHeadPic = entity.getUserHeadPic();
        if (userHeadPic != null) {
            stmt.bindString(13, userHeadPic);
        }
        stmt.bindLong(14, entity.getUserLevel());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(15, username);
        }
        stmt.bindLong(16, entity.getHasPassword());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getActionType());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(2, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(5, loginId);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
        stmt.bindLong(8, entity.getPlatform());
 
        String recommendCode = entity.getRecommendCode();
        if (recommendCode != null) {
            stmt.bindString(9, recommendCode);
        }
        stmt.bindLong(10, entity.getSex());
 
        Long storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindLong(11, storeId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
 
        String userHeadPic = entity.getUserHeadPic();
        if (userHeadPic != null) {
            stmt.bindString(13, userHeadPic);
        }
        stmt.bindLong(14, entity.getUserLevel());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(15, username);
        }
        stmt.bindLong(16, entity.getHasPassword());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getInt(offset + 0), // actionType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // birthday
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // loginId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.getInt(offset + 7), // platform
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // recommendCode
            cursor.getInt(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // storeId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // token
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userHeadPic
            cursor.getInt(offset + 13), // userLevel
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // username
            cursor.getInt(offset + 15) // hasPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setActionType(cursor.getInt(offset + 0));
        entity.setBirthday(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLoginId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlatform(cursor.getInt(offset + 7));
        entity.setRecommendCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.getInt(offset + 9));
        entity.setStoreId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setToken(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserHeadPic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserLevel(cursor.getInt(offset + 13));
        entity.setUsername(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHasPassword(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
